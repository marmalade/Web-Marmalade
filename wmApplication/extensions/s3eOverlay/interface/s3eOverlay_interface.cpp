/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"

#include "s3eOverlay.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eOverlayRegister_t)(s3eOverlayCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*s3eOverlayUnRegister_t)(s3eOverlayCallback cbid, s3eCallback fn);
typedef s3eOverlay*(*s3eOverlayCreate_t)(const unsigned int xPos, const unsigned int yPos, const unsigned int width, const unsigned int height);
typedef  s3eResult(*s3eOverlayDestroy_t)(s3eOverlay* handle);
typedef       void(*s3eOverlaySetPosition_t)(s3eOverlay* handle, const unsigned int x, const unsigned int y);
typedef       void(*s3eOverlayResize_t)(s3eOverlay* handle, const unsigned int width, const unsigned int height);
typedef       void(*s3eOverlaySetBackgroundColour_t)(s3eOverlay* handle, const s3eOverlayEColour colour);
typedef  s3eResult(*s3eOverlayAddItem_t)(s3eOverlay* handle, const s3eOverlayEItem item, const unsigned int xPos, const unsigned int yPos, const unsigned int width, const unsigned int height);
typedef  s3eResult(*s3eOverlayRemoveItem_t)(s3eOverlay* handle);

/**
 * struct that gets filled in by s3eOverlayRegister
 */
typedef struct s3eOverlayFuncs
{
    s3eOverlayRegister_t m_s3eOverlayRegister;
    s3eOverlayUnRegister_t m_s3eOverlayUnRegister;
    s3eOverlayCreate_t m_s3eOverlayCreate;
    s3eOverlayDestroy_t m_s3eOverlayDestroy;
    s3eOverlaySetPosition_t m_s3eOverlaySetPosition;
    s3eOverlayResize_t m_s3eOverlayResize;
    s3eOverlaySetBackgroundColour_t m_s3eOverlaySetBackgroundColour;
    s3eOverlayAddItem_t m_s3eOverlayAddItem;
    s3eOverlayRemoveItem_t m_s3eOverlayRemoveItem;
} s3eOverlayFuncs;

static s3eOverlayFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xec55a972, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE, "error loading extension: s3eOverlay");
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xec55a972, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eOverlayAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eOverlayRegister(s3eOverlayCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(OVERLAY_VERBOSE, ("calling s3eOverlay[0] func: s3eOverlayRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eOverlayRegister(cbid, fn, userData);
}

s3eResult s3eOverlayUnRegister(s3eOverlayCallback cbid, s3eCallback fn)
{
    IwTrace(OVERLAY_VERBOSE, ("calling s3eOverlay[1] func: s3eOverlayUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eOverlayUnRegister(cbid, fn);
}

s3eOverlay* s3eOverlayCreate(const unsigned int xPos, const unsigned int yPos, const unsigned int width, const unsigned int height)
{
    IwTrace(OVERLAY_VERBOSE, ("calling s3eOverlay[2] func: s3eOverlayCreate"));

    if (!_extLoad())
        return NULL;

    return g_Ext.m_s3eOverlayCreate(xPos, yPos, width, height);
}

s3eResult s3eOverlayDestroy(s3eOverlay* handle)
{
    IwTrace(OVERLAY_VERBOSE, ("calling s3eOverlay[3] func: s3eOverlayDestroy"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eOverlayDestroy(handle);
}

void s3eOverlaySetPosition(s3eOverlay* handle, const unsigned int x, const unsigned int y)
{
    IwTrace(OVERLAY_VERBOSE, ("calling s3eOverlay[4] func: s3eOverlaySetPosition"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eOverlaySetPosition(handle, x, y);
}

void s3eOverlayResize(s3eOverlay* handle, const unsigned int width, const unsigned int height)
{
    IwTrace(OVERLAY_VERBOSE, ("calling s3eOverlay[5] func: s3eOverlayResize"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eOverlayResize(handle, width, height);
}

void s3eOverlaySetBackgroundColour(s3eOverlay* handle, const s3eOverlayEColour colour)
{
    IwTrace(OVERLAY_VERBOSE, ("calling s3eOverlay[6] func: s3eOverlaySetBackgroundColour"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eOverlaySetBackgroundColour(handle, colour);
}

s3eResult s3eOverlayAddItem(s3eOverlay* handle, const s3eOverlayEItem item, const unsigned int xPos, const unsigned int yPos, const unsigned int width, const unsigned int height)
{
    IwTrace(OVERLAY_VERBOSE, ("calling s3eOverlay[7] func: s3eOverlayAddItem"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eOverlayAddItem(handle, item, xPos, yPos, width, height);
}

s3eResult s3eOverlayRemoveItem(s3eOverlay* handle)
{
    IwTrace(OVERLAY_VERBOSE, ("calling s3eOverlay[8] func: s3eOverlayRemoveItem"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eOverlayRemoveItem(handle);
}
